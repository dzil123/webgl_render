{"version":3,"file":"webgl.js","sourceRoot":"","sources":["../../src/webgl.ts"],"names":[],"mappings":"AAAA,sEAAsE;AAEtE,OAAO,8BAA8B,CAAC;AAGtC,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAClC,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAMtC,MAAM,CAAN,IAAY,qBAGX;AAHD,WAAY,qBAAqB;IAC/B,yEAAY,CAAA;IACZ,qEAAU,CAAA;AACZ,CAAC,EAHW,qBAAqB,KAArB,qBAAqB,QAGhC;AAOD,MAAM,UAAU,MAAM,CAAC,SAAiB;IACtC,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9E,MAAM,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;IACjD,IAAI,GAAG,EAAE,CAAC;QACR,GAAG,CAAC,gBAAgB,CAAC;YACnB,wBAAwB,EAAE,IAAI;SAC/B,CAAC,CAAC;QACH,8DAA8D;QAC9D,QAAQ;IACV,CAAC;IACD,OAAO,EAAoB,CAAC;AAC9B,CAAC;AAED,SAAS,YAAY,CAAC,EAAO,EAAE,IAAY;IACzC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;QAC3B,OAAO,EAAE,CAAC,aAAa,CAAC;IAC1B,CAAC;SAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,OAAO,EAAE,CAAC,eAAe,CAAC;IAC5B,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,wBAAwB,IAAI,EAAE,CAAC,CAAC;IAClD,CAAC;AACH,CAAC;AAED,qFAAqF;AACrF,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,EAAO,EAAE,IAAY;IACpD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE,CACpE,CAAC,CAAC,IAAI,EAAE,CACT,CAAC;IACF,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IACpE,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;IAE1B,IAAI,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;IACrD,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAE9B,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAEzB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,EAAO,EACP,OAAiB,EACjB,YAAiB;IAEjB,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,CAAC;IAEnD,MAAM,OAAO,CAAC,GAAG,CACf,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QACzB,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1C,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAEnC,kEAAkE;QAClE,sDAAsD;QAEtD,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC,CAAC,CACH,CAAC;IAEF,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IAE1B,MAAM,WAAW,GAAG,EAAE,CAAC,mBAAmB,CAAC,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC;IAC1E,OAAO,CAAC,GAAG,CAAC,mBAAmB,WAAW,EAAE,CAAC,CAAC;IAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,QAAQ,GAAoD,EAAE,CAAC;IACrE,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QAC5B,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAiB,EAAE,CAAC;AACpD,CAAC;AAED,SAAS,YAAY,CAAC,CAAS;IAC7B,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;QAC/C,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC;IAC5D,CAAC;IAED,aAAa;IACb,OAAO,sBAAsB,CAAC,QAAQ,GAAG,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,EAAwB,CAAC;AAEhE,6EAA6E;AAC7E,gHAAgH;AAChH,MAAM,UAAU,OAAO,CACrB,EAAO,EACP,OAAqB,EACrB,IAAY,EACZ,KAAa;IAEb,mFAAmF;IACnF,MAAM,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;IAC/C,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;QAC/B,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;SAAM,CAAC;QACN,cAAc,CAAC,CAAC,CAAE,IAAI,CAAC,CAAC;IAC1B,CAAC;IACD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9C,MAAM,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;IAEjC,MAAM,eAAe,GAAG,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7D,IAAI,eAAe,KAAK,IAAI,EAAE,CAAC;QAC7B,OAAO,CAAC,IAAI,CAAC,mBAAmB,IAAI,GAAG,CAAC,CAAC;QAEzC,SAAS,YAAY,CAAC,CAAe,IAAG,CAAC;QAEzC,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,IAAI,OAAO,GAAG,EAAE,CAAC,aAAa,EAAE,CAAC;IACjC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAEhC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACvB,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAEvC,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,kBAAkB,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;IACnE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,kBAAkB,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;IACnE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC;IACrE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC;IACrE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC;IAErE,EAAE,CAAC,SAAS,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IAErC,MAAM,OAAO,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,0BAA0B;IAErD,OAAO,YAAY,CAAC;IAEpB,SAAS,YAAY,CAAC,IAAkB;QACtC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,IAAI,CAAC,CAAC,EAAE,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,mCAAmC,OAAO,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAEvB,MAAM,MAAM,GAAG,EAAE,CAAC,UAAU,CAAC;QAC7B,MAAM,KAAK,GAAG,CAAC,CAAC;QAChB,MAAM,cAAc,GAAG,EAAE,CAAC,OAAO,CAAC;QAClC,MAAM,MAAM,GAAG,KAAK,CAAC;QACrB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;QACrC,MAAM,MAAM,GAAG,CAAC,CAAC;QACjB,MAAM,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC;QACvB,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC;QACtB,MAAM,MAAM,GAAG,IAAI,CAAC;QACpB,EAAE,CAAC,UAAU,CACX,MAAM,EACN,KAAK,EACL,cAAc,EACd,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,IAAI,EACJ,MAAM,CACP,CAAC;IACJ,CAAC;AACH,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,EAAO;IAC5B,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;QAC7B,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;AACH,CAAC","sourcesContent":["/// <reference path=\"../node_modules/webgl-strict-types/index.d.ts\" />\n\nimport \"../third-party/webgl-lint.js\";\nimport { mat4 } from \"../third-party/gl-matrix/index.js\";\n\nimport * as util from \"./util.js\";\nimport * as canvas from \"./canvas.js\";\n\nexport import GL = WebGLRenderingContextStrict;\nexport type GL2 = WebGL2RenderingContextStrict &\n  WebGLRenderingContextStrict.Base_OES_element_index_uint; // bug in webgl-strict-types\n\nexport enum VertexAttributeLayout {\n  Position = 0,\n  Normal = 1,\n}\n\nexport interface Program<K extends keyof any> {\n  glProgram: WebGLProgram;\n  uniforms: Record<K, WebGLUniformLocation | null>;\n}\n\nexport function loadGL(elementId: string): GL2 {\n  const gl = util.nonnull(canvas.getCanvasById(elementId).getContext(\"webgl2\"));\n  const ext = gl.getExtension(\"GMAN_debug_helper\");\n  if (ext) {\n    ext.setConfiguration({\n      failUnsetSamplerUniforms: true,\n    });\n    // workaround for webgl-lint bug (TODO report issue / make PR)\n    // const\n  }\n  return gl as unknown as GL2;\n}\n\nfunction typeOfShader(gl: GL2, name: string): GL.ShaderType {\n  if (name.endsWith(\".vert\")) {\n    return gl.VERTEX_SHADER;\n  } else if (name.endsWith(\".frag\")) {\n    return gl.FRAGMENT_SHADER;\n  } else {\n    throw new Error(`Invalid shader name: ${name}`);\n  }\n}\n\n// input.replaceAll(/^\\s*#include\\s+\"([\\w.-_]*)\"/mg, (_, name) => name.toUpperCase())\nexport async function loadShader(gl: GL2, name: string): Promise<WebGLShader> {\n  const include = await util.download(\"shaders/\", \"include.glsl\", (r) =>\n    r.text(),\n  );\n  let source = await util.download(\"shaders/\", name, (r) => r.text());\n  source = include + source;\n\n  let shader = gl.createShader(typeOfShader(gl, name));\n  shader = util.nonnull(shader);\n\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  return shader;\n}\n\nexport async function loadProgram<K extends string>(\n  gl: GL2,\n  shaders: string[],\n  uniformNames: K[],\n): Promise<Program<K>> {\n  const glProgram = util.nonnull(gl.createProgram());\n\n  await Promise.all(\n    shaders.map(async (name) => {\n      const shader = await loadShader(gl, name);\n      gl.attachShader(glProgram, shader);\n\n      // let ext = util.nonnull(gl.getExtension(\"WEBGL_debug_shaders\"));\n      // console.log(ext.getTranslatedShaderSource(shader));\n\n      gl.deleteShader(shader);\n    }),\n  );\n\n  gl.linkProgram(glProgram);\n\n  const numUniforms = gl.getProgramParameter(glProgram, gl.ACTIVE_UNIFORMS);\n  console.log(`uniforms found: ${numUniforms}`);\n  for (let i = 0; i < numUniforms; i++) {\n    console.log(`uniform #${i}`, gl.getActiveUniform(glProgram, i));\n  }\n\n  const uniforms: Partial<Record<K, WebGLUniformLocation | null>> = {};\n  uniformNames.forEach((name) => {\n    uniforms[name] = gl.getUniformLocation(glProgram, name);\n  });\n\n  return { glProgram, uniforms: uniforms as never };\n}\n\nfunction textureIndex(i: number): GL.TextureUnit {\n  if (!(Number.isInteger(i) && 0 <= i && i < 32)) {\n    throw new Error(`Texture index ${i} must be 0 <= x < 32`);\n  }\n\n  // @ts-ignore\n  return WebGL2RenderingContext.TEXTURE0 + i;\n}\n\nconst globalTextures = util.new_globals<WebGLProgram, number>();\n\n// creates a f32 vec4 datatexture and returns a function to upload data to it\n// this also sets the uniform on the program, so this program must be active (gl.useProgram) when this is called\nexport function texture(\n  gl: GL2,\n  program: WebGLProgram,\n  name: string,\n  width: number,\n): (data: Float32Array) => void {\n  // keep a counter for each program to assign a unique monotonic id for each texture\n  const global_storage = globalTextures(program);\n  if (global_storage.length == 0) {\n    global_storage[0] = 0;\n  } else {\n    global_storage[0]! += 1;\n  }\n  const index = util.nonnull(global_storage[0]);\n\n  const unit = textureIndex(index);\n\n  const uniformLocation = gl.getUniformLocation(program, name);\n  if (uniformLocation === null) {\n    console.warn(`unused texture '${name}'`);\n\n    function writeTexture(_: Float32Array) {}\n\n    return writeTexture;\n  }\n\n  let texture = gl.createTexture();\n  texture = util.nonnull(texture);\n\n  gl.activeTexture(unit);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\n\n  gl.uniform1i(uniformLocation, index);\n\n  const rowSize = 4 * width; // 'width' number of vec4s\n\n  return writeTexture;\n\n  function writeTexture(data: Float32Array) {\n    if (!(data.length % rowSize == 0)) {\n      throw new Error(`length of data not divisible by ${rowSize}`);\n    }\n\n    gl.activeTexture(unit);\n\n    const target = gl.TEXTURE_2D;\n    const level = 0;\n    const internalFormat = gl.RGBA32F;\n    const width_ = width;\n    const height = data.length / rowSize;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.FLOAT;\n    const pixels = data;\n    gl.texImage2D(\n      target,\n      level,\n      internalFormat,\n      width_,\n      height,\n      border,\n      format,\n      type,\n      pixels,\n    );\n  }\n}\n\nexport function resize(gl: GL2) {\n  if (canvas.resize(gl.canvas)) {\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  }\n}\n"]}