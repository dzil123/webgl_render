{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,KAAK,CAAC,GAAW;IAC/B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,UAAU,KAAK;IACnB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;AAClE,CAAC;AAED,MAAM,UAAU,OAAO,CAAI,CAAI;IAC7B,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,EAAE;QACjC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;KACpC;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAED,MAAM,UAAU,WAAW;IAGzB,IAAI,OAAO,GAAc,EAAE,CAAC;IAE5B,IAAI,GAAG,GAAG,CAAC,GAAM,EAAE,EAAE;QACnB,KAAK,IAAI,IAAI,IAAI,OAAO,EAAE;YACxB,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACnB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;aAChB;SACF;QAED,IAAI,IAAI,GAAY,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC9B,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC;IAEF,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAC5B,MAAc,EACd,GAAW,EACX,QAAqC;IAErC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;QAC5B,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC;KACpB;IACD,IAAI,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;QAChB,MAAM,IAAI,KAAK,CACb,sBAAsB,GAAG,KAAK,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,EAAE,CACvE,CAAC;KACH;IAED,IAAI,IAAI,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAEpC,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["export function sleep(sec: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, sec * 1000));\n}\n\nexport function frame(): Promise<DOMHighResTimeStamp> {\n  return new Promise((resolve) => requestAnimationFrame(resolve));\n}\n\nexport function nonnull<T>(v: T): NonNullable<T> {\n  if (v === undefined || v === null) {\n    throw new Error(\"unexpected null\");\n  }\n  return v;\n}\n\nexport function new_globals<K, V>(): (key: K) => V[] {\n  type Storage = [K, V[]];\n\n  let storage: Storage[] = [];\n\n  let get = (key: K) => {\n    for (let item of storage) {\n      if (item[0] === key) {\n        return item[1];\n      }\n    }\n\n    let item: Storage = [key, []];\n    storage.push(item);\n    return item[1];\n  };\n\n  return get;\n}\n\nexport async function download<T>(\n  subdir: string,\n  url: string,\n  callback: (r: Response) => Promise<T>\n): Promise<T> {\n  if (!url.startsWith(\"data:\")) {\n    url = subdir + url;\n  }\n  let response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(\n      `Failed to download ${url}: ${response.status} ${response.statusText}`\n    );\n  }\n\n  let data = await callback(response);\n\n  return data;\n}\n"]}