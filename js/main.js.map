{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4 } from \"../third-party/gl-matrix/index.js\";\n\nimport * as util from \"./util.js\";\nimport * as webgl from \"./webgl.js\";\nimport * as gltf from \"./gltf.js\";\n// import \"./demo.js\";\n\nlet gl = webgl.loadGL();\n\nlet [gltfDoc, scene] = await gltf.loadGltf(gl, \"polygon.gltf\");\n\nlet vert = await webgl.loadShader(gl, \"particle.vert\");\nlet frag = await webgl.loadShader(gl, \"particle.frag\");\n\n// let ext = util.nonnull(gl.getExtension(\"WEBGL_debug_shaders\"));\n// console.log(ext.getTranslatedShaderSource(vert));\n// console.log(ext.getTranslatedShaderSource(frag));\n\nlet program = util.nonnull(gl.createProgram());\ngl.attachShader(program, vert);\ngl.attachShader(program, frag);\ngl.linkProgram(program);\n\nlet aspect = gl.canvas.width / gl.canvas.height;\n\ngl.clearColor(0.5, 0.5, 0.5, 1.0);\ngl.useProgram(program);\n\n/*\nconst num_verts = 5;\nlet [vertexData, indexData] = generate_polygon(num_verts);\n\nlet indexBuffer = util.nonnull(gl.createBuffer());\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\ngl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW);\n\nlet vertexBuffer = util.nonnull(gl.createBuffer());\ngl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);\n*/\n\n{\n  const vertexPosition = gl.getAttribLocation(program, \"pos\");\n  const numComponents = 3; // pull out 2 values per iteration\n  const type = gl.FLOAT; // the data in the buffer is 32bit floats\n  const normalize = false; // don't normalize\n  const stride = 0; // how many bytes to get from one set of values to the next\n  // 0 = use type and numComponents above\n  const offset = 0; // how many bytes inside the buffer to start from\n  gl.vertexAttribPointer(vertexPosition, numComponents, type, normalize, stride, offset);\n  gl.enableVertexAttribArray(vertexPosition);\n}\n\n// framebuffer vs renderbuffer\n\nlet fps_element = util.nonnull(document.getElementById(\"fps\"));\nlet fps_avg_element = util.nonnull(document.getElementById(\"fps_avg\"));\nlet then = 0;\nlet then_then = 0;\nlet counter = 0;\nconst avg_len = 60;\n\nlet primitive = util.nonnull(gltfDoc.meshes?.[0]?.primitives[0]);\nlet position_index = util.nonnull(primitive.attributes[\"POSITION\"]);\nlet indices_index = util.nonnull(primitive.indices);\nlet position_accessor = util.nonnull(gltfDoc.accessors?.[position_index]);\nlet indices_accessor = util.nonnull(gltfDoc.accessors?.[indices_index]); // narrow indices interface - must be unsigned\n\nconsole.assert(position_accessor.type == \"VEC3\");\nconsole.assert(indices_accessor.type == \"SCALAR\");\n\nlet position_bufferview = scene.bufferViews[util.nonnull(position_accessor.bufferView)];\nlet indices_bufferview = scene.bufferViews[util.nonnull(indices_accessor.bufferView)];\n\nwhile (true) {\n  let now = (await util.frame()) / 1000;\n\n  webgl.resize(gl);\n\n  let delta = now - then;\n  then = now;\n  let fps = 1.0 / delta;\n  let fps_str = fps.toFixed(2);\n  fps_element.innerText = fps_str;\n\n  counter += 1;\n  if (counter >= avg_len) {\n    counter = 0;\n    let delta = now - then_then;\n    then_then = now;\n    let fps = avg_len / delta;\n    let fps_str = fps.toFixed(2);\n    fps_avg_element.innerText = fps_str;\n  }\n\n  let fov = 70.0;\n  let aspect = gl.canvas.width / gl.canvas.height;\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  // gl.drawElements(gl.TRIANGLES, indexData.length, gl.UNSIGNED_BYTE, 0);\n  gl.drawElements(\n    gl.TRIANGLES,\n    indices_accessor.count,\n    <any>indices_accessor.componentType, // since this is an indices_accessor, it must be unsigned integer\n    0\n  );\n}\n\nfunction generate_polygon(count: number): [Float32Array, Uint8Array] {\n  let delta_angle = (Math.PI * 2) / count;\n  let start_angle = delta_angle * -0.5;\n  let scale = 1.0 / Math.cos(start_angle);\n\n  let array = new Float32Array(count * 2);\n\n  for (let i = 0; i < count; i++) {\n    let angle = start_angle + delta_angle * i;\n    console.log((angle * 180) / Math.PI);\n\n    array[i * 2] = Math.sin(angle) * scale;\n    array[i * 2 + 1] = -Math.cos(angle) * scale;\n  }\n\n  console.log(array);\n\n  let indexArray = new Uint8Array((count - 2) * 3);\n  for (let i = 0; i < count; i++) {\n    indexArray[i * 3] = 0;\n    indexArray[i * 3 + 1] = i + 1;\n    indexArray[i * 3 + 2] = i + 2;\n  }\n  console.log(indexArray);\n\n  return [array, indexArray];\n}\n"]}