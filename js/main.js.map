{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { mat4 } from \"../third-party/gl-matrix/index.js\";\n\nimport * as util from \"./util.js\";\nimport * as webgl from \"./webgl.js\";\nimport * as websocket from \"./websocket.js\";\n// import \"./demo.js\";\n\nfunction message_handler(data: { [name: string]: any }) {\n  // console.log(data[\"mat4\"]);\n  uploadCameraMatrix(new Float32Array(data[\"mat4\"]));\n}\n\nlet gl = webgl.loadGL();\n\nlet vert = await webgl.loadShader(gl, \"fullscreen_tri.vert\");\nlet frag = await webgl.loadShader(gl, \"raymarch_minimal.frag\");\n\n// let ext = util.nonnull(gl.getExtension(\"WEBGL_debug_shaders\"));\n// console.log(ext.getTranslatedShaderSource(vert));\n// console.log(ext.getTranslatedShaderSource(frag));\n\nlet program = util.nonnull(gl.createProgram());\ngl.attachShader(program, vert);\ngl.attachShader(program, frag);\ngl.linkProgram(program);\n\nlet aspect = gl.canvas.width / gl.canvas.height;\n\ngl.clearColor(1.0, 1.0, 1.0, 1.0);\ngl.useProgram(program);\n\n// framebuffer vs renderbuffer\n\nlet uploadCameraMatrix = webgl.texture(gl, program, \"cameraMatrix\", 4);\nlet uploadSceneSpheres = webgl.texture(gl, program, \"sceneSpheres\", 1);\nlet uploadGlobals = webgl.texture(gl, program, \"globals\", 1);\n\nuploadCameraMatrix(\n  new Float32Array([\n    0.760406, 0, -0.649448, 0, -0.039648, 0.998135, -0.046421, 0, 0.648236,\n    0.061048, 0.758988, 0, 3.823527, 0.299516, 7.624601, 1,\n  ])\n);\n\nuploadSceneSpheres(\n  new Float32Array([0, 0, -1, 2.7, 3, 1, 0, 1.2, -2, -1, 1, 1])\n);\n\n// let ws_promise = websocket.createWS(message_handler);\n\nlet fps_element = util.nonnull(document.getElementById(\"fps\"));\nlet fps_avg_element = util.nonnull(document.getElementById(\"fps_avg\"));\nlet then = 0;\nlet then_then = 0;\nlet counter = 0;\nconst avg_len = 60;\n\nwhile (true) {\n  let now = (await util.frame()) / 1000;\n\n  webgl.resize(gl);\n\n  let delta = now - then;\n  then = now;\n  let fps = 1.0 / delta;\n  let fps_str = fps.toFixed(2);\n  fps_element.innerText = fps_str;\n\n  counter += 1;\n  if (counter >= avg_len) {\n    counter = 0;\n    let delta = now - then_then;\n    then_then = now;\n    let fps = avg_len / delta;\n    let fps_str = fps.toFixed(2);\n    fps_avg_element.innerText = fps_str;\n  }\n\n  let fov = 70.0;\n  let aspect = gl.canvas.width / gl.canvas.height;\n  uploadGlobals(new Float32Array([now, fov, aspect, 0]));\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 3);\n}\n"]}