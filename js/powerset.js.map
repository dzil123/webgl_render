{"version":3,"file":"powerset.js","sourceRoot":"","sources":["../../src/powerset.ts"],"names":[],"mappings":";AAsCA;IAWE,QAAQ;IAER,SAAS,QAAQ,CAAC,CAAQ,IAAG,CAAC;IAE9B,IAAI,KAAK,GAAiB,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IACtC,KAAK,GAAG,EAAE,GAAG,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IAC9B,KAAK,GAAG,EAAE,GAAG,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IAC9B,QAAQ,CAAC,KAAK,CAAC,CAAC;CACjB","sourcesContent":["type Head<T extends unknown[]> = ((...args: T) => never) extends (\n  _: infer R,\n  ...args: any\n) => never\n  ? R\n  : never;\n\ntype Tail<T extends unknown[]> = ((...args: T) => never) extends (\n  _: any,\n  ...args: infer R\n) => never\n  ? R\n  : never;\n\ntype Append<T, X extends T, L extends T[]> = L[\"length\"] extends 0\n  ? [X]\n  : [Head<L> | X, ...Append<T, X, Tail<L>>];\n\ntype PowerSet<T, L extends T[]> = L[\"length\"] extends 0\n  ? []\n  : PowerSet<T, Tail<L>> extends infer X\n  ? X extends T[]\n    ? [...X, ...Append<T, Head<L>, X>]\n    : never\n  : never;\n\ntype Reverse<L extends unknown[]> = L[\"length\"] extends 0\n  ? []\n  : [...Reverse<Tail<L>>, Head<L>];\n\ntype Builder<T, L extends (keyof T)[]> = Reverse<L> extends (keyof T)[]\n  ? BuilderImpl<T, Reverse<L>>\n  : never;\n\ntype BuilderImpl<T, L extends (keyof T)[]> = L[\"length\"] extends 0\n  ? never\n  : BuilderImpl<T, Tail<L>> | Pick<T, L[number]>;\n\n{\n  interface Scene {\n    foo: {};\n    bar: {};\n    baz: {};\n  }\n\n  type ScenePowerSet = PowerSet<keyof Scene, [\"foo\", \"bar\", \"baz\"]>;\n  //    ^?\n\n  type SceneBuilder = Builder<Scene, [\"foo\", \"bar\", \"baz\"]>; // order must match use\n  //    ^?\n\n  function useScene(_: Scene) {}\n\n  let scene: SceneBuilder = { foo: {} };\n  scene = { ...scene, bar: {} };\n  scene = { ...scene, baz: {} };\n  useScene(scene);\n}\n"]}