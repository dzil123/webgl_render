{"version":3,"file":"gltf.js","sourceRoot":"","sources":["../../src/gltf.ts"],"names":[],"mappings":"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","sourcesContent":["import * as webgl from \"./webgl.js\";\nimport * as util from \"./util.js\";\n\ninterface Gltf {\n  readonly asset: { version: \"2.0\" };\n  buffers: Buffer[];\n  meshes: Mesh[];\n  accessors: Accessor[];\n  bufferViews: BufferView[];\n}\n\nconst GLTF_DEFAULT: Gltf = {\n  asset: { version: \"2.0\" },\n  buffers: [],\n  meshes: [],\n  accessors: [],\n  bufferViews: [],\n};\n\nenum AccessorTypeEnum {\n  SCALAR,\n  VEC2,\n  VEC3,\n  VEC4,\n  MAT2,\n  MAT3,\n  MAT4,\n}\ntype AccessorType = keyof typeof AccessorTypeEnum;\n\nfunction accessorTypeToNumComponents(t: AccessorType) {\n  const LUT = {\n    [AccessorTypeEnum.SCALAR]: 1,\n    [AccessorTypeEnum.VEC2]: 2,\n    [AccessorTypeEnum.VEC3]: 3,\n    [AccessorTypeEnum.VEC4]: 4,\n    [AccessorTypeEnum.MAT2]: 4,\n    [AccessorTypeEnum.MAT3]: 9,\n    [AccessorTypeEnum.MAT4]: 16,\n  } as const;\n\n  return LUT[AccessorTypeEnum[t]];\n}\n\ninterface Accessor {\n  bufferView?: number; // -> bufferViews\n  byteOffset?: number;\n  componentType: webgl.GL.ArrayType | webgl.GL.GLenum<\"UNSIGNED_INT\">;\n  count: number;\n  type: AccessorType;\n  normalized?: boolean;\n}\n\ninterface BufferView {\n  buffer: number; // -> buffers\n  byteOffset?: number;\n  byteLength: number;\n  byteStride?: number;\n  target?: webgl.GL.BufferTarget;\n}\n\ninterface Buffer {\n  uri?: string;\n  byteLength: number;\n}\n\ninterface Mesh {\n  primitives: Primitive[];\n}\n\ninterface Primitive {\n  attributes: { [key: string]: number }; // -> accessors\n  indices?: number; // -> accessors\n  mode?: webgl.GL.DrawMode;\n}\n\ninterface Scene {\n  buffers: ArrayBuffer[];\n  bufferViews: {\n    arrayView: BufferSource;\n    glBuffer: WebGLBuffer;\n    target: webgl.GL.BufferTarget;\n  }[];\n}\n\nasync function downloadBuffer(buffer: Buffer): Promise<ArrayBuffer> {\n  let uri = util.nonnull(buffer.uri);\n  let data = await util.download(\"models/\", uri, (r) => r.arrayBuffer());\n  if (data.byteLength != buffer.byteLength) {\n    throw { msg: \"Size doesn't match\", data, buffer };\n  }\n  return data;\n}\n\nfunction loadBufferView(\n  gl: webgl.GL2,\n  bufferView: BufferView,\n  scene: Pick<Scene, \"buffers\">\n): Scene[\"bufferViews\"][0] {\n  if (bufferView.byteStride !== undefined) {\n    throw \"byteStride unsupported\";\n  }\n\n  let array = util.nonnull(scene.buffers[bufferView.buffer]);\n  let offset = bufferView.byteOffset || 0;\n  let target = util.nonnull(bufferView.target);\n\n  // TODO: is it ok to use Uint8 regardless of AccessorType?\n  let arrayView = new Uint8Array(array, offset, bufferView.byteLength);\n\n  let glBuffer = util.nonnull(gl.createBuffer());\n  gl.bindBuffer(target, glBuffer);\n  gl.bufferData(target, arrayView, gl.STATIC_DRAW);\n\n  return { arrayView, glBuffer, target };\n}\n\nasync function downloadGltf(name: string): Promise<Gltf> {\n  let gltf: Partial<Gltf> = await util.download(\"models/\", name, (r) => r.json());\n  console.dir(gltf);\n\n  if (gltf?.asset?.version === \"2.0\") {\n    return { ...GLTF_DEFAULT, ...gltf };\n  }\n\n  throw { msg: \"Unsupported gltf\", asset: gltf.asset };\n}\n\nexport async function loadGltf(gl: webgl.GL2, name: string): Promise<[Gltf, Scene]> {\n  let gltf = await downloadGltf(name);\n\n  let scene: util.Builder<Scene, [\"buffers\", \"bufferViews\"]>;\n  scene = { buffers: await Promise.all(gltf.buffers.map(downloadBuffer)) };\n  scene = {\n    ...scene,\n    bufferViews: gltf.bufferViews.map((v) => loadBufferView(gl, v, scene)),\n  };\n\n  return [gltf, scene];\n}\n"]}