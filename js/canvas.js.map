{"version":3,"file":"canvas.js","sourceRoot":"","sources":["../../src/canvas.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC,MAAM,UAAU,eAAe,CAC7B,KAAa,EACb,MAAc;IAEd,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAChD,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,uBAAuB,CACrC,QAA2B;IAE3B,OAAO,eAAe,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC1D,CAAC;AAED,2BAA2B;AAC3B,MAAM,UAAU,MAAM,CAAC,MAAyB;IAC9C,MAAM,GAAG,GAAG,MAAM,CAAC,gBAAgB,CAAC;IACpC,0BAA0B;IAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;IAE5C,8CAA8C;IAC9C,gDAAgD;IAEhD,MAAM,CAAC,GAAG,GAAG,CAAC;IACd,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE/B,IAAI,MAAM,CAAC,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,EAAE,CAAC;QACrD,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;QAEvB,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QACxE,kBAAkB,CAAC,SAAS,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC;QACtE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AASD,iBAAiB,CAAC,SAAS,CAAC,aAAa,GAAG,KAAK,UAAU,aAAa;IACtE,OAAO,IAAI,CAAC,OAAO,CACjB,MAAM,IAAI,OAAO,CAAc,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAClE,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,UAAU,aAAa,CAAC,SAAiB;IAC7C,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IAClD,IAAI,CAAC,CAAC,MAAM,YAAY,iBAAiB,CAAC,EAAE,CAAC;QAC3C,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;IACD,MAAM,CAAC,MAAM,CAAC,CAAC;IACf,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import * as util from \"./util.js\";\n\nexport function createOffscreen(\n  width: number,\n  height: number,\n): HTMLCanvasElement {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n\nexport function createOffscreenSameSize(\n  template: HTMLCanvasElement,\n): HTMLCanvasElement {\n  return createOffscreen(template.width, template.height);\n}\n\n/// true if resize occurred\nexport function resize(canvas: HTMLCanvasElement): boolean {\n  const dpr = window.devicePixelRatio;\n  // dpr = Math.min(dpr, 2);\n  const rect = canvas.getBoundingClientRect();\n\n  // const width = Math.round(rect.width * dpr);\n  // const height = Math.round(rect.height * dpr);\n\n  const x = 100;\n  const [width, height] = [x, x];\n\n  if (canvas.width != width || canvas.height != height) {\n    canvas.width = width;\n    canvas.height = height;\n\n    const resolution_element = util.nonnull(document.getElementById(\"res\"));\n    resolution_element.innerText = `${dpr.toFixed(2)} ${width} ${height}`;\n    return true;\n  }\n  return false;\n}\n\n// monkey patch to follow OffscreenCanvas.convertToBlob\ndeclare global {\n  interface HTMLCanvasElement {\n    convertToBlob: () => Promise<Blob>;\n  }\n}\n\nHTMLCanvasElement.prototype.convertToBlob = async function convertToBlob() {\n  return util.nonnull(\n    await new Promise<Blob | null>((resolve) => this.toBlob(resolve)),\n  );\n};\n\nexport function getCanvasById(elementId: string): HTMLCanvasElement {\n  const canvas = document.getElementById(elementId);\n  if (!(canvas instanceof HTMLCanvasElement)) {\n    throw new Error(\"Expected element to be a canvas\");\n  }\n  resize(canvas);\n  return canvas;\n}\n"]}